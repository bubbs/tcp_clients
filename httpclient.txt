CONCEPT
        httpclient


SYNOPSIS
        httpclient .c - LDMud object providing HTTP client services - v0.5.2.


CONTENTS
        Concept
        Synopsis
        Contents
        License
        Files
        Usage
        Event Descriptions
        Mudlib Access Control
        Simple Code Example
        Change Log
        Bugs
        To Do
        Thoughts


LICENSE
        It's my code.  I said so.  You can use it, or can abuse it, but
        preferably not misuse it.  Basically, you can use it however you
        like, but on your own head be it!  I'm curious how it goes for
        you, so feel free drop me a line.

        By Bubbs (bubbs@eclipse.co.uk).

        Or... LGPL, GPL3 - You choose.


FILES
        The following files are required for httpclient to work properly:
          httpclient.c               LPC (LDMud) object file;
          httpclient.h               LPC (LDMud) include file;
          httpclient.txt             This manual;
          source_types.ini           Source types data;
          tcp_socket.c               Portable socket layer.
        You may also require these function files:
          mktime.txt                 Manual for mktime() function;
          parse_time.c               Functions mktime() and parse_time();
          parse_time.txt             Manual for parse_time() function.
        The files may also be useful:
          _wget.c                    'wget' command object.


USAGE
        Currently, only the HTTP request methods GET, HEAD, OPTIONS, POST
        and PUT are supported.

        The httpclient.h header file contains all the definitions required
        for handling HTTP requests using httpclient.  Place it somewhere
        convenient;

          #include <httpclient.h>

        The httpclient object is designed so that requests can be made by
        calling the request function in the blueprint object.  In this case,
        it will clone a default httpclient, and pass the request to it.

        If a default httpclient is not required, then clone the httpclient
        object, call the configuration methods as required, and then call
        the HTTP request method with the URL (possibly with parameters).

        To make a request, call the request() method, it will return 0 for
        an immediate failure, or 1 for possible success (in which case, a
        callback event will be fired later to determine success or failure).

          int result = HTTPCLIENT->request([string method,]
                        string url|mixed url_data,
                        [mixed content, [mixed ctype,]]
                        closure callback);

        Only the URL and callback arguments are required.  The arguments are:

          string method
            The HTTP method to use, defaults to "GET" if not specified;

          string url|mixed url_data
            The target URL to access, either as a string, or as an URL
            array, as generated by parse_url().

          string|mapping|int*|symbol|int|float|object|closure content
            For POST and PUT methods, the content passed with the request:
              First, closures are evaluated, passed the URL and URL array,
              the result is used as the content value.  String and mapping
              values are encoded as 'www-form'encoding' (with mapping values
              expressed as 'name1=value+1&name2=value+2' format - that is
              'www-form-urlencoded').  Arrays of ints, symbols, ints, floats
              and objects are all converted to a string with to_string() and
              passed unencoded to the request.
            For other methods, this overrides the specified url argument(s).

          mixed ctype
            For POST and PUT methods, the content type of the request entity.
            If not specified, the content type is deduced from the content.

          closure callback
            The callback argument is mandatory, no default is supplied.  It
            should be a closure that accepts the following call signature:

              mixed <callback>(object client, int event, mixed data);

            The event values are defined in httpclient.h, and are described
            below.  The type of data passed differs according to the event,
            as does the interpretation of the returned value.

        These legacy functions can also be used to initiate a request:

          public int request_delete (string url, closure callback);
          public int request_get    (string url, closure callback);
          public int request_head   (string url, closure callback);
          public int request_options(string url, closure callback);
          public int request_post   (string url, mixed content, closure callback);
          public int request_put    (string url, mixed content, closure callback);
          public int request_trace  (string url, closure callback);


        When httpclient deals with URLs, it stores them in a 'url data'
        mixed array using index and size definitions from httpclient.h;

          URD_PROTOCOL         0          string - always "http";
          URD_HOST             1          string - e.g. "www.google.co.uk";
          URD_PORT             2          int    - e.g 80;
          URD_PATH             3          string - e.g. "/search.html";
          URD_ARGS             4          string - e.g. "q=ldmud";

          URL_DATA_SIZE        5          the size of a url_data array.

        When httpclient deals with cookies, it stores them in a 'cookie data'
        mixed array, using index and size definitions from httpclient.h;

          CK_NAME              0          string - cookie name;
          CK_VALUE             1          string - cookie data;
          CK_EXPIRES           2          int    - expiry time (-1 for session);
          CK_SECURE            3          int    - https cookie (always 0);
          CK_DOMAIN            4          string - cookie domain;
          CK_PATH              5          string - cookie path.

          COOKIE_SIZE          6          the size of a cookie array.


        These functions may be used to manipulate the current request:

          public int     clear();
            Clear the request and response related data, close the socket
            if necessary.  This resets the httpclient to it's unused state.

          public int     abort_request();
            Abort the current request.

          public int     repeat_request();
            Rebuild the request headers and repeat the current request.

          public string  apply_base_url(string url, string base_url);
            Expand a url, relative to base_url (if 0, use the current url).


        These utility functions are available in httpclient for general use:

          public mixed   parse_url(string target_url);
            Return either an url data array, or an error string.

          public string  unparse_url(mixed* url_data);
            Return a re-constituted (and hence normalised) url.

          public  int    parse_cookie_date(string date_text);
            Return the integer time value of a cookie date string.

          public mapping read_source_types(string data_file);
            Read source types from the specified file.

          public string determine_source_type(string path, string source);
            Determine the source type of a path and source content.

          public string  unquote_string(string str);
            Unquote a double-quoted string

          public string  encode_www_form(mixed value);
          public string  encode_www_form(mixed value, string exclude_chars);
            Encode a value with x-www-form-urlencoded encoding.

          public string  decode_www_form(string value);
            Decode a x-www-form-urlencoded encoded value.

          public string  encode_base64(string value);
            Encode a value with base64 encoding.

          public string  decode_base64(string value);
            Decode a base64 encoded value.

          public int     to_hex(string str);
            Convert a hexadecimal string to an integer.


        These functions may be used to query and configure the httpclient:

          public int     set_language(string l);
          public int     set_media_types(string mt);
          public int     set_referer_url(string ru);
          public int     set_user_agent(string ua);
          public int     set_cookies(mixed* cs);
          public int     set_authorization(string u, string p);

          public string  query_default_user_agent();
          public string  query_http_version();

          public int     query_busy();
          public object  query_busy_object();

          public string  query_language();
          public string  query_media_types();
          public string  query_referer_url();
          public string  query_user_agent();

          public mixed*  query_cookies();
          public string* query_authorization();

          public string  query_url();
          public mixed*  query_url_data();

          public string  query_method();
          public string  query_base_url();
          public mapping query_req_headers();
          public mixed   query_req_content();

          public string  query_status_version();
          public int     query_status_code();
          public string  query_status_desc();
          public mixed   query_response();
          public mapping query_resp_headers();
          public mixed   query_content();


EVENT DESCRIPTIONS
        For each request, exactly one of either HTTP_BUSY, HTTP_FAILED,
        HTTP_SUCCESS or HTTP_REDIRECT events will be called.  Depending on
        the result of a HTTP_REDIRECT event, the request may be modified
        and then reattempted.  All other events may be called once only,
        multiple times, or not at all.  HTTP_AUTHENTICATE can break this
        rule when it returns a non-zero integer, this is to facilitate
        delayed authentication to occur.

          Event : HTTP_DEBUG
          Called: Various.
          Data  : mixed debug_value
          Return: ignored
          The client is sending some debug information.  This is ignorable.

          Event : HTTP_BUSY
          Called: Once
                  (HTTP_FAILED, HTTP_SUCCESS and HTTP_REDIRECT not called).
          Data  : 0
          Return: ignored
          The client is busy with another request.  To reset the client,
          call the client->clear() function.

          Event : HTTP_FAILED
          Called: Once
                  (HTTP_BUSY, HTTP_SUCCESS and HTTP_REDIRECT not called).
          Data  : string error_message
          Return: ignored
          The request failed for the reason error_message.

          Event : HTTP_SUCCESS
          Called: Once
                  (HTTP_BUSY, HTTP_FAILED and HTTP_REDIRECT not called).
          Data  : string content
          Return: ignored
          The request succeeded, returning the content.

          Event : HTTP_REDIRECT
          Called: Once per HEAD or GET request.
          Data  : string redirect_url
          Return: int follow_redirect
          The client is asking for permission to redirect the request.
          Return non-zero to instruct the client to follow the redirection.

          Event : HTTP_GOT_STATUS
          Called: Zero (on failure), or once (on initial response).
          Data  : string status_line
          Return: ignored
          The client has received a response from the server, and has
          extracted the status.

          Event : HTTP_GOT_HEADER
          Called: Multiple, per response header.
          Data  : ({ string header, string value, })
          Return: ignored
          The client received the given response header.

          Event : HTTP_GET_COOKIES
          Called: Once, before the request is sent.
          Data  : 0
          Return: ({ cookie0, cookie1, ... cookieN, })
          The client is asking for the cookies for the HTTP request.
          This should be an array of cookie data.

          Event : HTTP_SEND_COOKIE
          Called: Multiple, per Cookie request header.
          Data  : mixed* cookie
          Return: int send_cookie
          The client is asking whether it should send a cookie (non-zero
          return value), or withhold it (zero return value).

          Event : HTTP_KEEP_COOKIE
          Called: Multiple, per cookie in the Set-Cookie response header.
          Data  : mixed* cookie
          Return: int keep_cookie
          The client is asking the application whether it should keep a
          cookie (non-zero return value), or discard it immediately (zero
          return value).  This is the best place to filter unwanted cookies.

          Event : HTTP_SET_COOKIES
          Called: Once, following processing of Set-Cookie server header.
          Data  : ({ cookie0, cookie1, ... cookieN, })
          Return: ignored
          The client is passing all cookies back to the application.

          Event : HTTP_AUTHENTICATE
          Called: When handling status 401 Unauthorized.
          data  : ({ string host, string realm, })
          Return: 0, 1, "user:password, or a mapping of user/password pairs.
          The client is asking the application to provide authentication
          details for the specified host and realm.  The application should
          return an integer, a string containing multiple "user:password"
          pairs (separated by new-lines "\n"), or a mapping or user/password
          pairs.  Returning zero indicates that no authentication will occur
          (leading to an HTTP_FAILED event).  Returning a non-zero integer
          prevents further httpclient processing, allowing the application
          to determine subsequent redirection behaviour.


MUDLIB ACCESS CONTROL
        When httpclient makes a request (using any protocol), it can check
        with the mudlib master object to see if the request is disallowed.

        To use this feature, add this function to your master object;

          public string valid_http_request(string url, mixed* url_data, string method);

        It should return an error string for invalid requests.  If it
        returns any other non-zero value, the request fails and a default
        error string is used.

        If no validation function is added, all requests are valid.

        If file urls ('file:') are enabled, read control is handled via a direct
        call to master->valid_read() (with appropriate arguments).


SIMPLE CODE EXAMPLE
        #include <httpclient.h>

        mixed*  cookies = ({ });
        string  url     = 0;
        string  content = 0;
        string  error   = 0;

        int   get_request(string u);
        int   clear_request();
        mixed httpclient_callback(object client, int event, mixed data);

        int get_request(string u) {
          if (url)
            return 0;

          url = u;
          return (int)(HTTPCLIENT->request(u, #'http_callback));
        }

        void clear_request() {
          url     = 0;
          content = 0;
          error   = 0;
        }

        mixed httpclient_callback(object client, int event, mixed data) {
          mixed  result   = 0;
          int    finished = 0;

          switch(event) {
            case HTTP_BUSY:
              error    = "Client busy.";
            break;
            case HTTP_FAILED:
              error    = data;
              finished = 1;
            break;
            case HTTP_SUCCESS:
              content  = data;
              finished = 1;
            break;
            case HTTP_REDIRECT:
              result   = 1;
            break;
            case HTTP_GET_COOKIES:
              result   = cookies;
            break;
            case HTTP_SEND_COOKIE:
              result   = 1;
            break;
            case HTTP_KEEP_COOKIE:
              result   = 1;
            break;
            case HTTP_SET_COOKIES:
              cookies  = data;
            break;
          }

          finished && destruct(client);

          return result;
        }


CHANGE LOG
        10/Oct/2010: v0.5.2.
          Renamed to_hex() to hex_to_int().  Added int_to_hex().
          Added query_httpclient_version().

        ??/July/2010: v0.5.1.
          Removed LDMud 3.3 compile warnings.
          Added decode_base64().

        08/July/2010: v0.5.0.
          Added 'PUT' 'DELETE' and 'TRACE' method support.
          Added request_content, separating 'post_args' from url_data.
          Added request() - generic request method, adds ability to specify
            GET/HEAD url arguments, or POST/PUT content and content type.
          Replaced request_*() methods with 'request() alias' methods.
          Switched internal methods from private to protected access.
          Renamed internal receive_*() methods to process_*().
          Refactored the obese socket_close() into a number of methods;
            process_authenticate(), process_chunked(), process_status_#xx().
          Fixed bug in VALID_COOKIE definition.
          Added ability to pre-specify the accepted language codes.
          Updates to httpclient.txt documentation.
          Added source types mapping, read_source_types_file() and
            determine_source_type(), and supporting code.
          Added new file - source_types.ini.
          Fixed encode_www_form(mapping).

        30/June/2010: v0.4.15.
          Restructured httpclient.txt.
          Fixed HTTP_GET_COOKIES error handling (thanks Paradox@Dune).
          Fixed last modified time handling for 'about:' protocol.
          Added encode_www_form(mapping), to give "a=b&c=d" style string.
          Enhanced 'file:' read permissions (calls master()->valid_read()).

        04/April/2010: v0.4.14.
          Fixed port handling in unparse_http_url().

        22/Febuary/2009: v0.4.13.
          Rewrote apply_base_url(), added optional base_url argument,
            handles non-HTTP protocol urls, and gives better results.
          Revised redirect handling - proper parse_url() checking and
            reporting.
          Don't 'www-form-urlencoded' file url paths, and don't expect
            them to be 'www-form-urlencoded'.

        21/January/2009: v0.4.12.
          Tweaked unparse_ methods to return 0 if url_data is malformed.
          Tweaked request_ methods to accept url_data as well as an url.

        28/September/2008: v0.4.11.
          Added abort_request() request function.
          Added unparse_url() and associated protocol utility functions.
          Tweaked httpclient.h definitions - renamed ABOUT_FILE definition
            to ABOUT_HTTP_FILE, and adding VALID_COOKIE() macro.

        01/July/2008: v0.4.10.
          Added master()->valid_httpclient_request(url, url_data, method)
            call to check that request is allowed.
          Added the Atom date/time format to parse_cookie_date() formats.

        23/March/2008: v0.4.9.
          Debugged/tweaked HTTP_AUTHENTICATE return value handling.
          The various request_*() functions now return 1 for valid requests.
          Added repeat_request(), repeats the previous request.
          Added a few callback events for 'about:' and 'file:' requests.
          Internal requests now correctly respond to request method.

        09/June/2007: v0.4.8.
          Added set_authorization() and query_authorization() to support
            pre-emptive request authorization.
          Fixed bugs in 401 authorization handling.
          Fixed encode_base64().

        23/May/2007: v0.4.7.
          Revamped logging, and added logging of 'http:' and 'file:'
            requests.
          You're not going to believe this, but I fixed cookie updating.
          Tweaked cookies handling - can now be set directly, or through
          HTTP_SET_COOKIES.  HTTP_GET_COOKIES is now no longer called twice.
          Refactored parse_cookie_date() a little bit, made it public.

        14/May/2007: v0.4.6.
          Incompatible with v.4.5 client applications:
            Added HTTP_SEND_COOKIE event; enables individual control over
            the cookies sent.
            Rearranged callback events.
          Really fixed cookie provision.  Honest.  Really.

        12/May/2007: v0.4.5.
          Added ENABLE_FILE_URLS definition (not defined), and used it to
            prevent 'file:' url support, since it has no access control.

        11/March/2007: v0.4.4.
          Added URL_DATA_SIZE and COOKIE_SIZE definitions.
          Added ABOUT_FILE definition, used for "about:httpclient" request.
          Documented httpclient.h and httpclient public methods in
            httpclient.txt.

        25/Febuary/2007: v0.4.3.
          Call perform_request() via a call_out (with 0 delay) instead of
            directly.
          Protocol handlers perform_*_request() now return an error, which
            is passed to HTTP_FAILED as appropriate.
          Tweaked parse_cookie_date() to use COOKIE_DATE_FORMATS definition.
          Optimisation in parse_time.c (no longer needs subst() simul-efun).

        18/December/2006: v0.4.2.
          Refactored socket use to tcp_socket.c, socket portability layer.
          Ported to Dune.
          Refactored response handling into several functions, including
            receive_header() and receive_cookies().

        23/November/2006: v0.4.1.
          Tweaked cookie handling.
          Tweaked cookie date handling.
          Added request_options(url, callback).
          Added 'http:' request handler perform_http_request().
          Added 'file:' request handler perform_file_request().
          Added 'about:' request handler perform_about_request().

        11/June/2004: v0.4.0.
          Fixed chunked decoding (phew).
          Added to_hex().
          parse_url() now ignores page references
            (e.g. "http://site/page#ref").
          Added status code handlers for 1xx-3xx codes.
          Added HTTP_REDIRECT callback.
          Started support for 'file:' protocol.
          Added "WWW-Authenticate" support.

        08/June/2004: v0.3.1.
          Created httpclient.txt from comments in httpclient.c, added
            documentation on events and simple example application.

        06/June/2004: v0.3.0.
          Finished/fixed cookie parsing; moved parse_time() and mktime()
            functions into seperate (inherit/simul_efun-able) module.
          Added HTTP_DEBUG and HTTP_GOT_STATUS callbacks.

        05/June/2004: v0.2.2.
          Improved header support, implemented transfer encodings and
            chunked decoding, enabled HTTP/1.1.
          Added base_url.
          Fixed Cookie provision.
          Started Set-Cookie parsing (including date parsing).

        04/June/2004: v0.2.1.
          Added request_head() HEAD request support.

        03/June/2004: v0.2.0.
          Fleshed out the cookie support a bit.

        02/June/2004: v0.1.3.
          Properly implemented POST method, added init_request(),
            encode_www_form() and decode_www_form().
          Rudimentary cookie support.

        31/May/2004: v0.1.2.
          Improved response handling, header parsing, status codes.

        29/May/2004: v0.1.1.
          Basic structure; socket/SOCKETD handling, client callbacks,
            GET/perform_request(), basic response handling.

        28/May/2004: v0.1.0.
          Initial thoughts about HTTP and URLs.


BUGS
        Pretty sure that binary mode over HTTP isn't working.
        Fails to talk HTTP 1.0 to HTTP 1.0 hosts.
        Should add URL anchor refs to url_data, not ignore/discard them.


TO DO
        v0.6:
          Better request/response header use:
            Better media_types API;
            Default language / better language API;
            "Accept-Charset" support, suitable default;
            Cache control.
          Response header parsing as it arrives.
          Response dechunking (etc) as it arrives.

        v0.7:
          Multiple entity transfer / drop use of "Connection: close":
            Implies ability to queue requests (HTTP_QUEUED), with queue
            variable and management methods;
            Talk to HTTP/1.0 servers properly (i.e. close connection).

        v1.0:
          Ranged GET request support.
          Conditional GET support (Range, Entity Tag, Last Modified).


THOUGHTS
        Keep 'state' variable, with defines for values;
          READY, COMPOSING, CONNECTING, READING, PARSING, COMPLETE.
        Add a series of HTTP_DEBUG events to mark significant
          points in the request life cycle / change of state (!).
        Additional argument(s) to request().
        Public methods should ignore calls from unknown objects.
        Better "\r\n|\n\r" handling.
        XML support would enable easier handling of XML types.
        Secure socket support would enable 'https:' protocol support.

END

